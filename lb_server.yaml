heat_template_version: 2015-10-15

description: A load-balancer server

parameters:
  image:
    type: string
    description: Image used for servers
  key:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  private_network:
    type: string
    description: Network used by the server
  private_subnet:
    type: string
    description: Sub-network used by the server
  sec_group:
    type: string
    description: Security Group used by the server
  app_port:
    type: string
    description: Number of web app port
  pool:
    type: string
    description: Pool to contact

resources:
#  wait_handle:
#    type: OS::Heat::WaitConditionHandle
# 
#  wait_condition:
#    type: OS::Heat::WaitCondition
#    properties:
#      handle: { get_resource: wait_handle }
#      count: 1
#      timeout: 300

  config_dummy_web:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $_PORT: { get_param: app_port }
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo -e $Response | nc -llp $_PORT; done

#  config_send_notify:
#    type: OS::Heat::SoftwareConfig
#    properties:
#      config:
#        str_replace:
#          params:
#            __heat_wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
#          template: |
#            #!/bin/bash -ex
#            __heat_wc_notify --data-binary '{"status": "SUCCESS"}'

  server_init_web:
    type: OS::Heat::MultipartMime
    properties:
      parts:
#      - config: { get_resource: config_send_notify }
      - config: { get_resource: config_dummy_web }

  server:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key }
      user_data_format: RAW
      user_data: { get_resource: server_init_web }
      networks:
        - network: { get_param: private_network }
      security_groups:
        - { get_param: sec_group }

  member:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_param: pool }
      address: { get_attr: [ server, first_address ] }
      protocol_port: { get_param: app_port }
      subnet: { get_param: private_subnet }

outputs:
  server_ip:
    description: IP Address of the load-balanced server.
    value: { get_attr: [ server, first_address ] }
  lb_member:
    description: LB member details.
    value: { get_attr: [ member, show ] }
